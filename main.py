import telebot
from telebot import types
import os

from repository import Repository


bot = telebot.TeleBot("token")
repository = Repository("***","***","***", "***", "***")

blacklist = [***]



@bot.message_handler(commands=["useful_links"])
def f(message):
    bot.send_message(message.chat.id,
    f"<em>–ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Ä–µ—Å—É—Ä—Å—ã:</em>\n"
    f"https://ege.sdamgia.ru - —Å–∞–π—Ç –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–Ω—ã—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤\n"
    f"https://gramota.ru ‚Äî —Å–ø—Ä–∞–≤–æ—á–Ω–æ-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ä—Ç–∞–ª –æ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ\n"
    f"https://skysmart.ru - —ç—Ç–æ —Å–∞–π—Ç –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å, –∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ "
                                     f"–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–Ω—è—Ç–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º\n"
    f"https://uchi.ru - –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–Ω–ª–∞–π–Ω-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—á–µ–±–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n"
    f"https://www.yaklass.ru - –¥—É–º–∞—é –≤—Å–µ –∏ —Ç–∞–∫ –∑–Ω–∞—é—Çüò©\n"
    f"<em>–ù–µ–π—Ä–æ–Ω–∫–∏:</em>\n"
    f"https://chat.deepseek.com - deepseek\n"
    f"https://chat.qwenlm.ai - qwen\n"
    f"https://giga.chat - giga_chat\n"
    f"https://chat.mistral.ai - le_chat"
                                     f"",parse_mode="html")


@bot.message_handler(commands=["schedule"])
def send_schedule(message):
    try:
        class_name = "10–ë"

        schedule_path = repository.get_schedule_path(class_name)

        if not schedule_path or not os.path.exists(schedule_path):
            bot.send_message(
                message.chat.id,
                f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            )
            return

        with open(schedule_path, 'rb') as photo_file:
            bot.send_photo(
                chat_id=message.chat.id,
                photo=photo_file,
                caption=f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∞ {class_name}"
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )




@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(message.chat.id,
    f"üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤, "
    f"–∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç—è—Ç –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ "
    f"–∏ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –∫–æ–Ω—Å–ø–µ–∫—Ç—ã –æ—Ç –¥—Ä—É–≥–∏—Ö —É—á–∞—â–∏—Ö—Å—è.\n"
    f"–ó–∞–≥—Ä—É–∂–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å–ø–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç "
    f"–¥—Ä—É–≥–∏–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–º–∞—Ö.\n\n"
    f"<em>–û–ø—Ü–∏–∏:</em>\n"
    f"/subjects - –≤—ã–≤–µ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç—ã\n"
    f"/useful_links - –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è —É—á–µ–±—ã\n"
    f"/schedule - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤\n\n"
    f"‚òéÔ∏è –ü–æ –≤—Å–µ –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—Å–∞—Ç—å —Å—é–¥–∞: @jn_7548",
                     parse_mode="html")



@bot.message_handler(commands=["subjects"])
def starts(message):
    subjects = repository.get_subjects()
    markup = types.InlineKeyboardMarkup()
    for subject in subjects:
        markup.add(types.InlineKeyboardButton(subject[1], callback_data=f'subject_{subject[0]}'))
    bot.send_message(message.chat.id, "<em>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:</em>", reply_markup=markup, parse_mode='html')

    repository.add_user(message.from_user.id)



@bot.callback_query_handler(func=lambda callback: callback.data.startswith('subject_'))
def callback_message(callback):
    subject_id = callback.data.split('_')[-1]
    subject_name, topics = repository.get_topics(subject_id)

    markup = types.InlineKeyboardMarkup()
    for topic in topics:
        markup.add(types.InlineKeyboardButton(topic[1], callback_data=f'topic_{topic[0]}'))

    btn = types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É", callback_data=f"add_topic_{subject_id}")
    markup.add(btn)

    bot.send_message(callback.message.chat.id, f"<em>–¢–µ–º—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject_name[0]}:</em>", reply_markup=markup, parse_mode='html')



@bot.callback_query_handler(func=lambda callback: callback.data.startswith("add_topic_"))
def add_topic_prompt(callback):
    subject_id = callback.data.split('_')[-1]
    if callback.from_user.id in blacklist:
        bot.send_message(callback.message.chat.id, "–í–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")
        return
    msg = bot.send_message(callback.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã")
    bot.register_next_step_handler(msg, add_topic_to_db, subject_id)



def add_topic_to_db(message, subject_id):
    topic_name = message.text.strip()
    if not topic_name:
        bot.send_message(message.chat.id, "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º üò† . –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    if repository.add_topic_to(topic_name, subject_id):
        bot.send_message(message.chat.id, f"–¢–µ–º–∞ ¬´{topic_name}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    else:
        bot.send_message(message.chat.id, f"–¢–µ–º–∞ ¬´{topic_name}¬ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")



@bot.callback_query_handler(func=lambda callback: callback.data.startswith('topic_'))
def callback_message(callback):
    topic_id = callback.data.split('_')[-1]

    markup = types.InlineKeyboardMarkup()

    btn1 = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç", callback_data=f"add_foto_{topic_id}")
    btn2 = types.InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç", callback_data=f"open_foto_{topic_id}")
    markup.row(btn1, btn2)

    bot.send_message(callback.message.chat.id, f"<em>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</em>: ", reply_markup=markup, parse_mode='html')




@bot.callback_query_handler(func=lambda callback: callback.data.startswith("add_foto_"))
def add_state(callback):

    if callback.from_user.id in blacklist:
        bot.send_message(callback.message.chat.id, "–í–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")

    try:
        topic_id = callback.data.split('_')[-1]
        user_id = callback.from_user.id

        repository.begin_photo_recieving(user_id, topic_id)

        markup = types.ReplyKeyboardMarkup(True, True)
        btn = types.KeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É")
        markup.add(btn)

        bot.send_message(callback.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n–ù–∞–∂–º–∏—Ç–µ <em><b>–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É</b></em>, —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å.",
                         reply_markup=markup, parse_mode='html')

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
        bot.send_message(callback.message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üò≠")




@bot.message_handler(content_types=["photo"])
def get_photo(message):
    user_id = message.from_user.id
    try:
        user_data = repository.check_the_user_status(user_id)

        if user_data[2] != "–æ–∂–∏–¥–∞–Ω–∏–µ": 
            bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ. üò†")
            return


        if not message.photo:
            return
        topic_id, abstract_id, _ = user_data

        largest_photo = message.photo[-1]
        file_id = largest_photo.file_id

        if not os.path.exists('chat_bot_abstracts'):
            os.makedirs('chat_bot_abstracts')

        photo_path = os.path.join('chat_bot_abstracts', f"{file_id}.jpg")
        file_info = bot.get_file(file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        with open(photo_path, 'wb') as photo_file:
            photo_file.write(downloaded_file)

        repository.save_abstract(abstract_id, photo_path)

    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ üò≠.")



@bot.message_handler(func=lambda message: message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É")
def finish_upload(message):
    user_id = message.from_user.id
    try:

        repository.status_completed(user_id)

        markup = types.ReplyKeyboardRemove()

        bot.send_message(message.chat.id, "‚úîÔ∏è –ö–æ–Ω—Å–ø–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! üòò\n"
                                          "–í <em><b>–º–µ–Ω—é</b></em> –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç—ã",
                         reply_markup=markup, parse_mode = 'html')


    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ üò±.")



@bot.callback_query_handler(func=lambda callback: callback.data.startswith("open_foto_"))
def open_abstract_from_db(callback):

    try:
        topic_id = callback.data.split('_')[-1]

        repository.cleanup_empty_abstracts()

        abstract_ids = repository.availability_abstracts(topic_id)

        if not abstract_ids:
            bot.send_message(
                chat_id=callback.message.chat.id,
                text="–ö–æ–Ω—Å–ø–µ–∫—Ç—ã –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            )
            return

        for (abstract_id,) in abstract_ids:  
            photo_paths = repository.open_abstract(abstract_id)

            if not photo_paths:
                bot.send_message(
                    chat_id=callback.message.chat.id,
                    text=f"–ö–æ–Ω—Å–ø–µ–∫—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
                )
                continue


            for (photo_path,) in photo_paths:  
                if photo_path and os.path.exists(photo_path):
                    with open(photo_path, 'rb') as photo_file:
                        bot.send_photo(
                            chat_id=callback.message.chat.id,
                            photo=photo_file,
                        )
                else:
                    print(f"–§–∞–π–ª {photo_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        bot.send_message(
            chat_id=callback.message.chat.id,
            text="–í–æ—Ç –≤—Å–µ —Ñ–æ—Ç–æ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞ ‚òùÔ∏èüòò\n"
                 "–í <em><b>–º–µ–Ω—é</b></em> –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç—ã",
            parse_mode = 'html'
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        bot.send_message(
            chat_id=callback.message.chat.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ üò±. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        )


bot.polling(non_stop=True)
